{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","console","log","src","alt","key","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","setTimeout","chat","document","querySelector","scroll","behavior","scrollTop","scrollHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sSAyBeA,G,MAnBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACvBC,EADoD,EAApBC,WACVF,EAAQE,SAEpC,OACC,yBAAKH,IAAKA,EAAKI,UAAS,mBAAcF,GAAU,mBAC/C,yBAAKE,UAAU,aACZF,GAAD,UAAcD,EAAQE,UAAY,iBAEpC,kBAACE,EAAA,EAAD,CAAMD,UAAWF,EAAS,qBAAuB,uBAChD,kBAACI,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MACjCR,EAAQA,gB,iBCDAS,EAJKC,IAASC,cAVN,CACtBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKOC,Y,iDCqFRC,MA1Ff,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEkBF,mBAAS,IAF3B,mBAEPG,EAFO,KAEGC,EAFH,OAGkBJ,mBAAS,IAH3B,mBAGPnB,EAHO,KAGGwB,EAHH,KA2Cd,OAtCAC,qBAAU,WACTlB,EAAGmB,WAAW,YACZC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACZN,EACCM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAC3BC,GAAID,EAAIC,GACRnC,QAASkC,EAAIE,iBAIf,IAEHT,qBAAU,WACT,IAAIzB,EAAWmC,OAAO,0BACtBC,QAAQC,IAAIrC,GACK,KAAbA,IAAiBA,EAAW,WAChCwB,EAAYxB,KACV,IAqBF,yBAAKC,UAAU,OACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,UACd,yBACCA,UAAU,eACVqC,IAAI,mCACJC,IAAI,mBAEL,wBAAItC,UAAU,iBAAd,iBACA,wBAAIA,UAAU,oBAAd,WAA0CD,IAG3C,yBAAKiC,GAAG,OAAOhC,UAAU,eACxB,kBAAC,IAAD,KACEqB,EAASS,KAAI,YAAsB,IAAnBE,EAAkB,EAAlBA,GAAInC,EAAc,EAAdA,QACpB,OAAO,kBAAC,EAAD,CAAS0C,IAAKP,EAAIjC,SAAUA,EAAUF,QAASA,QAE5C,KAEb,yBAAKG,UAAU,UACd,0BAAMA,UAAU,aACf,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,oBACtB,kBAACyC,EAAA,EAAD,CACCzC,UAAU,aACV0C,YAAY,qBACZC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAWzB,EAASyB,EAAMC,OAAOH,UAG5C,kBAACI,EAAA,EAAD,CACC/C,UAAU,kBACVgD,UAAW7B,EACXf,QAAQ,YACR6C,MAAM,UACNC,KAAK,SACLC,QAtDa,SAACN,GACpBA,EAAMO,iBAEN9C,EAAGmB,WAAW,YAAY4B,IAAI,CAC7BtD,SAAUA,EACVF,QAASsB,EACTmC,UAAW/C,IAASS,UAAUuC,WAAWC,oBAG1CC,YAAW,WACV,IAAMC,EAAOC,SAASC,cAAc,SACpCF,EAAKG,OAAO,CAAEC,SAAU,WACxBJ,EAAKK,UAAYL,EAAKM,eACpB,KAEH5C,EAAS,MAwCH,kBAAC,IAAD,aC7EY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMpF,c","file":"static/js/main.2e3ac4c5.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./Message.css\";\n\nconst Message = forwardRef(({ message, username }, ref) => {\n\tconst isUser = username === message.username;\n\n\treturn (\n\t\t<div ref={ref} className={`messages ${isUser && \"messages__user\"}`}>\n\t\t\t<div className='username'>\n\t\t\t\t{!isUser && `${message.username || \"Unknown User\"}`}\n\t\t\t</div>\n\t\t\t<Card className={isUser ? \"messages__userCard\" : \"messages__guestCard\"}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<Typography variant='h5' component='h2'>\n\t\t\t\t\t\t{message.message}\n\t\t\t\t\t</Typography>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n});\n\nexport default Message;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyBXNVOvfTJXj-S9nJ4REnjXYZ7E1_SPc4g\",\n\tauthDomain: \"messanger-5eff5.firebaseapp.com\",\n\tprojectId: \"messanger-5eff5\",\n\tstorageBucket: \"messanger-5eff5.appspot.com\",\n\tmessagingSenderId: \"542822806712\",\n\tappId: \"1:542822806712:web:e92e2218a627c4e5b0704d\",\n\tmeasurementId: \"G-R3VRFWF4XP\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { FormControl, IconButton, Input } from \"@material-ui/core\";\n\nfunction App() {\n\tconst [input, setInput] = useState(\"\");\n\tconst [messages, setMessages] = useState([]);\n\tconst [username, setUsername] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tdb.collection(\"messages\")\n\t\t\t.orderBy(\"timestamp\", \"desc\")\n\t\t\t.onSnapshot((snapshot) => {\n\t\t\t\tsetMessages(\n\t\t\t\t\tsnapshot.docs.map((doc) => ({\n\t\t\t\t\t\tid: doc.id,\n\t\t\t\t\t\tmessage: doc.data(),\n\t\t\t\t\t}))\n\t\t\t\t);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlet username = prompt(\"Please enter your name\");\n\t\tconsole.log(username);\n\t\tif (username === \"\") username = \"Unknown\";\n\t\tsetUsername(username);\n\t}, []);\n\n\tconst sendMessage = (event) => {\n\t\tevent.preventDefault();\n\n\t\tdb.collection(\"messages\").add({\n\t\t\tusername: username,\n\t\t\tmessage: input,\n\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tconst chat = document.querySelector(\"#chat\");\n\t\t\tchat.scroll({ behavior: \"smooth\" });\n\t\t\tchat.scrollTop = chat.scrollHeight;\n\t\t}, 500);\n\n\t\tsetInput(\"\");\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div className='container'>\n\t\t\t\t<div className='header'>\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName='header__logo'\n\t\t\t\t\t\tsrc='Facebook_Messenger_logo_2020.svg'\n\t\t\t\t\t\talt='messenger logo'\n\t\t\t\t\t/>\n\t\t\t\t\t<h1 className='header__title'>Messenger App</h1>\n\t\t\t\t\t<h2 className='header__subtitle'>Welcome {username}</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div id='chat' className='messageList'>\n\t\t\t\t\t<FlipMove>\n\t\t\t\t\t\t{messages.map(({ id, message }) => {\n\t\t\t\t\t\t\treturn <Message key={id} username={username} message={message} />;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</FlipMove>{\" \"}\n\t\t\t\t</div>\n\t\t\t\t<div className='footer'>\n\t\t\t\t\t<form className='app__form'>\n\t\t\t\t\t\t<FormControl className='app__formControl'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tclassName='app__input'\n\t\t\t\t\t\t\t\tplaceholder='Enter a message...'\n\t\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\t\tonChange={(event) => setInput(event.target.value)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tclassName='app__iconButton'\n\t\t\t\t\t\t\t\tdisabled={!input}\n\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\tonClick={sendMessage}>\n\t\t\t\t\t\t\t\t<SendIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}